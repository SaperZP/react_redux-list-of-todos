{"version":3,"sources":["types/Select_otions.tsx","store/currentTodo.ts","store/loading.ts","store/index.ts","api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SelectOptions","ModalTodoActions","payload","type","loadingActions","selectors","state","loading","todo","rootReducer","combineReducers","action","selectedTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","todos","dispatch","useDispatch","className","map","id","completed","title","onClick","TodoFilter","todoFilter","useState","query","setQuery","ALL","option","setOption","useEffect","onChange","event","target","value","ACTIVE","COMPLETED","placeholder","length","style","pointerEvents","Loader","TodoModal","user","setUser","isLoading","setIsLoading","useSelector","userId","person","href","email","name","App","todosFromServer","setTodosFromServer","filteredTodos","setFilteredTodos","isLoaded","filter","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4921b926.chunk.js","sourcesContent":["export enum SelectOptions {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'SET_TODO',\n  payload: Todo,\n};\n\ntype ResetTodoAction = {\n  type: 'RESET_TODO',\n};\n\ntype SelectedTodoAction = (SetTodoAction | ResetTodoAction);\n\nexport const ModalTodoActions = {\n  selectTodo: (payload: Todo):SetTodoAction => (\n    { type: 'SET_TODO', payload }\n  ),\n\n  unselectTodo: ():ResetTodoAction => ({ type: 'RESET_TODO' }),\n};\n\nexport const selectedTodoReducer = (\n  selectedTodo: Todo | null = null,\n  action: SelectedTodoAction,\n) => {\n  switch (action.type) {\n    case 'SET_TODO':\n      return action.payload;\n\n    case 'RESET_TODO':\n      return null;\n\n    default:\n      return selectedTodo;\n  }\n};\n","type StartLoadingAction = {\n  type: 'START_LOADING',\n};\n\ntype FinishLoadingAction = {\n  type: 'FINISH_LOADING',\n};\n\ntype Action = (\n  StartLoadingAction\n  | FinishLoadingAction\n);\n\nexport const loadingActions = {\n  startLoading: (): StartLoadingAction => ({ type: 'START_LOADING' }),\n  finishLoading: (): FinishLoadingAction => ({ type: 'FINISH_LOADING' }),\n};\n\nexport const loadingReducer = (loading = false, action: Action) => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return false;\n\n    case 'FINISH_LOADING':\n      return true;\n\n    default:\n      return loading;\n  }\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { selectedTodoReducer } from './currentTodo';\nimport { loadingReducer } from './loading';\n\ntype RootState = ReturnType<typeof rootReducer>;\n\nexport const selectors = {\n  getloadingStatus: (state: RootState) => state.loading,\n  getTodo: (state: RootState) => state.todo,\n};\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  todo: selectedTodoReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ModalTodoActions } from '../../store/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  // selectTodo: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  // selectTodo,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">\n              {todo.id}\n            </td>\n            {todo.completed\n              ? (\n                <td className=\"is-vcentered\">\n                  <i className=\"fas fa-check\" />\n                </td>\n              )\n              : (\n                <td className=\"is-vcentered\" />\n              )}\n            <td className=\"is-vcentered is-expanded\">\n              <p className={todo.completed\n                ? 'has-text-success' : 'has-text-danger'}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(ModalTodoActions.selectTodo(todo))}\n              >\n                <span className=\"icon\">\n                  <i className=\"far fa-eye\" />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { SelectOptions } from '../../types/Select_otions';\n\ntype Props = {\n  todoFilter: (query: string, option: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({ todoFilter }) => {\n  const [query, setQuery] = useState('');\n  const [option, setOption] = useState(SelectOptions.ALL);\n\n  useEffect(() => {\n    todoFilter(query, option);\n  }, [query, option]);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => setOption(event.target.value as SelectOptions)}\n          >\n            <option value={SelectOptions.ALL}>All</option>\n            <option value={SelectOptions.ACTIVE}>Active</option>\n            <option value={SelectOptions.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { User } from '../../types/User';\n\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { selectors } from '../../store';\nimport { ModalTodoActions } from '../../store/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User>();\n  const [isLoading, setIsLoading] = useState(true);\n  const todo = useSelector(selectors.getTodo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (todo) {\n      getUser(todo.userId)\n        .then(person => {\n          setUser(person);\n          setIsLoading(false);\n        });\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : todo && (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(ModalTodoActions.unselectTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {/* <strong className=\"has-text-success\">Done</strong> */}\n                {todo.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n                {' by '}\n\n                {user && (\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                )}\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo } from './types/Todo';\nimport { SelectOptions } from './types/Select_otions';\n\nimport { getTodos } from './api';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { selectors } from './store';\nimport { loadingActions } from './store/loading';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n\n  const dispatch = useDispatch();\n  const isLoaded = useSelector(selectors.getloadingStatus);\n  const selectedTodo = useSelector(selectors.getTodo);\n\n  useEffect(() => {\n    const fetchTodo = () => {\n      getTodos().then(todos => {\n        setTodosFromServer(todos);\n        setFilteredTodos(todos);\n        dispatch(loadingActions.finishLoading());\n      });\n    };\n\n    fetchTodo();\n  }, []);\n\n  const todoFilter = (query: string, option: string) => {\n    const todos = todosFromServer.filter(todo => {\n      switch (option) {\n        case SelectOptions.ALL:\n          return todo.title.includes(query);\n\n        case SelectOptions.ACTIVE:\n          return !todo.completed && todo.title.includes(query);\n\n        case SelectOptions.COMPLETED:\n          return todo.completed && todo.title.includes(query);\n\n        default:\n          return false;\n      }\n    });\n\n    setFilteredTodos(todos);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter todoFilter={todoFilter} />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded\n                ? <TodoList todos={filteredTodos} />\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}